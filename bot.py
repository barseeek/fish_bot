import logging
import os

import redis
from environs import Env
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackQueryHandler, CommandHandler, MessageHandler
from telegram.ext import Filters, Updater

from keyboards import MENU_KEYBOARD, PRODUCT_KEYBOARD, CART_KEYBOARD, EMPTY_CART_KEYBOARD
from log import TelegramLogsHandler
from utils import Strapi

_database = None

logger = logging.getLogger('bot')


def start(update, context):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è START.

    –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ—Ä–∞–∑–æ–π "–ü—Ä–∏–≤–µ—Ç!" –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ HANDLE_MENU.
    –¢–µ–ø–µ—Ä—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ö—ç–Ω–¥–ª–µ—Ä echo.
    """

    update.message.reply_text(text='–ü—Ä–∏–≤–µ—Ç!', reply_markup=MENU_KEYBOARD)
    return "HANDLE_DESCRIPTION"


def handle_cart(update, context):
    query = update.callback_query
    query.answer()

    cart_id = Strapi.get_cart_id_by_tg_id(query.from_user.id)
    if not cart_id:
        cart_id = Strapi.create_cart(query.from_user.id)
    context.user_data["cart_id"] = cart_id

    if query.data == "my_cart":
        message = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n'
        cart_products = Strapi.get_cart_products(cart_id)

        if not cart_products:
            query.message.reply_text(text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', reply_markup=EMPTY_CART_KEYBOARD)

        for cart_product in cart_products["items"]:
            message += f"""üõí{cart_product['title']} üî¢{cart_product['amount']} {cart_product['unit']} üí∞{cart_product['total_unit_price']} —Ä—É–±.\n"""
        message += f"–û–±—â–∞—è —Å—É–º–º–∞: {round(cart_products['total_price'], 2)} —Ä—É–±."

        query.message.reply_text(text=message, reply_markup=CART_KEYBOARD)
        context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

    elif query.data == "order":
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:",
        )
        return "WAITING_EMAIL"
    elif query.data == "delete_product":
        cart_products = Strapi.get_cart_products(cart_id)
        delete_product_keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text=f"üõí{cart_product['title']} üî¢{cart_product['amount']} {cart_product['unit']}",
                        callback_data='delete_product_{}'.format(cart_product['id'])
                    )
                ]
                for cart_product in cart_products["items"]
            ])
        delete_product_keyboard.inline_keyboard.append([InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='my_cart')])
        query.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=delete_product_keyboard)
        context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

    elif query.data == "add_to_cart":
        product_id = context.user_data.get('product_id')
        if not product_id:
            query.message.reply_text(text='–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')

        message = Strapi.add_to_cart(cart_id, product_id)
        query.message.reply_text(text=message)
        show_menu(update, context)
        context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        return 'HANDLE_MENU'
    else:
        cart_product_id = query.data.replace('delete_product_', '')
        message = Strapi.delete_cart_product(cart_product_id)
        query.message.reply_text(text=message)
        show_menu(update, context)
        context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        return 'HANDLE_MENU'

    return 'HANDLE_CART'


def show_menu(update, context):
    context.bot.send_message(chat_id=update.effective_chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é:', reply_markup=MENU_KEYBOARD)


def handle_menu(update, context):
    query = update.callback_query
    query.answer()
    query.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é:', reply_markup=MENU_KEYBOARD)
    context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
    return "HANDLE_DESCRIPTION"


def handle_description(update, context):
    query = update.callback_query
    query.answer()

    product_id = query.data
    context.user_data["product_id"] = product_id
    product, image_data = Strapi.get_product(product_id)
    message = f"{product.get('description')}\n\n–¶–µ–Ω–∞ - {product.get('price')} —Ä—É–±. –∑–∞ {product.get('unit')}"
    context.bot.send_photo(
        chat_id=query.message.chat_id,
        photo=image_data,
        caption=message,
        reply_markup=PRODUCT_KEYBOARD
    )
    context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

    return "HANDLE_CART"


def handle_email(update, context):
    email = update.message.text

    if not Strapi.get_user(email):
        email, password = Strapi.create_user(email, update.message.from_user.username, context.user_data["cart_id"])
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–í–∞—à –ª–æ–≥–∏–Ω –æ—Ç –õ–ö Strapi: {email}\n –ü–∞—Ä–æ–ª—å: {password}",
        )
    else:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å–æ–∑–¥–∞–Ω"
        )
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É, –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
    )

    return "START"


def handle_users_reply(update, context):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ—à–∞–µ—Ç –∫–∞–∫ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        * –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –≤ –±–æ—Ç–µ
        * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É
        * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É
    –û–Ω–∞ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–µ–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (—Ö—ç–Ω–¥–ª–µ—Ä).
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, Telegram —Ñ–æ—Ä—Å–∏—Ç –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å "/start",
    –ø–æ—ç—Ç–æ–º—É –ø–æ —ç—Ç–æ–π —Ñ—Ä–∞–∑–µ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –∑–∞–Ω–æ–≤–æ, –æ–Ω —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π.
    """
    db = get_database_connection()
    if update.message:
        user_reply = update.message.text
        chat_id = update.message.chat_id
    elif update.callback_query:
        user_reply = update.callback_query.data
        chat_id = update.callback_query.message.chat_id
    else:
        return
    if user_reply == '/start':
        user_state = 'START'
    elif user_reply == 'back' or user_reply == 'to_menu':
        user_state = 'HANDLE_MENU'
    elif user_reply == 'add_to_cart':
        user_state = 'HANDLE_CART'
    elif user_reply == 'my_cart':
        user_state = 'HANDLE_CART'
    else:
        user_state = db.get(chat_id).decode("utf-8")

    states_functions = {
        'START': start,
        'HANDLE_MENU': handle_menu,
        'HANDLE_DESCRIPTION': handle_description,
        'HANDLE_CART': handle_cart,
        'WAITING_EMAIL': handle_email

    }
    state_handler = states_functions[user_state]

    try:
        next_state = state_handler(update, context)
        db.set(chat_id, next_state)
    except Exception as err:
        logger.error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {0}'.format(err))


def get_database_connection():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω–µ–∫—à–Ω —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Redis, –ª–∏–±–æ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.
    """
    global _database
    if _database is None:
        database_password = env.str("REDIS_PASSWORD")
        database_host = os.getenv("REDIS_HOST")
        database_port = os.getenv("REDIS_PORT")
        _database = redis.Redis(host=database_host, port=database_port, password=database_password)
    return _database


if __name__ == '__main__':
    env = Env()
    env.read_env()
    token = env.str("TELEGRAM_BOT_TOKEN")
    chat_id = env.str('TELEGRAM_CHAT_ID')
    telegram_log_token = env.str('TELEGRAM_LOG_BOT_TOKEN')

    tg_handler = TelegramLogsHandler(chat_id, telegram_log_token)
    logger.addHandler(tg_handler)
    logger.setLevel(env.str('LOG_LEVEL', 'INFO'))

    updater = Updater(token)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CallbackQueryHandler(handle_users_reply))
    dispatcher.add_handler(MessageHandler(Filters.text, handle_users_reply))
    dispatcher.add_handler(CommandHandler('start', handle_users_reply))
    updater.start_polling()
    logger.info('Fish TG –±–æ—Ç –∑–∞–ø—É—â–µ–Ω')

    updater.idle()
